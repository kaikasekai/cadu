const fs = require("fs");
const path = "./data.csv";
const fetch = require("node-fetch");

(async () => {
  // –ß—Ç–µ–Ω–∏–µ CSV
  const content = fs.readFileSync(path, "utf-8").trim();
  const rows = content.split("\n").map(line => line.split(","));

  const header = rows[0];
  const dateIndex = header.indexOf("date");
  const btcIndex = header.indexOf("btc_actual");
  const maIndex = header.indexOf("moving_average");

  if (dateIndex === -1  btcIndex === -1  maIndex === -1) {
    console.error("‚ùå Missing required columns in header.");
    return;
  }

  // –ù–∞–π–¥—ë–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ø—É—Å—Ç—ã–º btc_actual –∏ –ø—Ä–æ—à–µ–¥—à–µ–π –¥–∞—Ç–æ–π
  const today = new Date().toISOString().split("T")[0];
  const targetIndex = rows.findIndex((row, i) => i > 0 && !row[btcIndex] && row[dateIndex] <= today);

  if (targetIndex === -1) {
    console.log("‚úÖ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã ‚Äî –Ω–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç.");
    return;
  }

  const targetDate = rows[targetIndex][dateIndex];
  console.log(`üìÖ –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å BTC –∑–∞ ${targetDate}`);

  // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É BTC —Å CoinGecko (–∑–∞–∫—Ä—ã—Ç–∏–µ –¥–Ω—è)
  const url = https://api.coingecko.com/api/v3/coins/bitcoin/history?date=${formatDateForAPI(targetDate)};
  const res = await fetch(url);
  const data = await res.json();
  const price = data?.market_data?.current_price?.usd;

  if (!price) {
    console.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É BTC.");
    return;
  }

  // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ü–µ–Ω—É BTC
  rows[targetIndex][btcIndex] = price.toFixed(2);

  // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º moving average –Ω–∞ –æ—Å–Ω–æ–≤–µ 30 –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö btc_actual
  const btcValues = [];
  for (let i = targetIndex - 1; i >= 1 && btcValues.length < 30; i--) {
    const val = parseFloat(rows[i][btcIndex]);
    if (!isNaN(val)) {
      btcValues.push(val);
    }
  }

  if (btcValues.length < 30) {
    console.warn("‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ Moving Average.");
  } else {
    const ma = btcValues.reduce((sum, v) => sum + v, 0) / btcValues.length;

    // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ —Å—Ç—Ä–æ–∫–∞ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–ª–∏–Ω–Ω–∞—è
    while (rows[targetIndex].length <= maIndex) {
      rows[targetIndex].push("");
    }

    rows[targetIndex][maIndex] = ma.toFixed(2);
    console.log(`üìà Moving Average: ${ma.toFixed(2)}`);
  }

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
  const updatedContent = rows.map(row => row.join(",")).join("\n");
  fs.writeFileSync(path, updatedContent);
  console.log("‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ data.csv");
})();

// –§–æ—Ä–º–∞—Ç: dd-mm-yyyy
function formatDateForAPI(isoDate) {
  const [y, m, d] = isoDate.split("-");
  return ${d}-${m}-${y};
}
